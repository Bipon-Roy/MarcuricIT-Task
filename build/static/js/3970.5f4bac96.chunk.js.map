{"version":3,"file":"static/js/3970.5f4bac96.chunk.js","mappings":"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","sources":["components/Task/Employee-Salary/EmployeeSalaryTable.tsx","pages/AssignedTask/EmployeeSalary.tsx"],"sourcesContent":["//the component is a child component which invoked by PayrollItems from '/pages/AssignTask'\r\n\r\nimport { useState } from \"react\";\r\nimport { Dropdown, Table, Modal, Button, Form } from \"react-bootstrap\";\r\nimport { HiDotsVertical } from \"react-icons/hi\";\r\nimport { MdDelete, MdEdit } from \"react-icons/md\";\r\nimport { Link } from \"react-router-dom\";\r\nimport avatar from \"../../../assets/images/users/avatar-1.jpg\";\r\n// Type declaration\r\ninterface RowDataType {\r\n    name: string;\r\n    employeeId: string;\r\n    email: string;\r\n    joinDate: string;\r\n    role: string;\r\n    salary: number;\r\n}\r\n\r\ninterface EmployeeData {\r\n    tableRows: RowDataType[];\r\n    onEdit: (index: number, updatedRow: RowDataType) => void;\r\n    onRemove: (index: number) => void;\r\n}\r\n\r\nconst EmployeeSalaryTable = ({ tableRows, onEdit, onRemove }: EmployeeData) => {\r\n    //states declaration\r\n    const [showEditModal, setShowEditModal] = useState<boolean>(false);\r\n    const [selectedRowIndex, setSelectedRowIndex] = useState<number | null>(null);\r\n    const [editedRow, setEditedRow] = useState<RowDataType>({\r\n        name: \"\",\r\n        employeeId: \"\",\r\n        email: \"\",\r\n        joinDate: \"\",\r\n        role: \"\",\r\n        salary: 0,\r\n    });\r\n    const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\r\n\r\n    //edit button functionality\r\n    const handleEditClick = (index: number) => {\r\n        const selectedRow = tableRows[index];\r\n        setEditedRow(selectedRow);\r\n        setSelectedRowIndex(index);\r\n        setShowEditModal(true);\r\n    };\r\n\r\n    const handleEditSave = () => {\r\n        //showing validation error\r\n        const errors: Record<string, string> = {};\r\n        let hasError = false;\r\n\r\n        // Validate each field\r\n        if (!editedRow.name.trim()) {\r\n            errors.name = \"Name is required\";\r\n            hasError = true;\r\n        }\r\n        if (!editedRow.employeeId.trim()) {\r\n            errors.employeeId = \"Employee ID is required\";\r\n            hasError = true;\r\n        }\r\n        if (!editedRow.email.trim()) {\r\n            errors.email = \"Email is required\";\r\n            hasError = true;\r\n        }\r\n        if (!editedRow.role.trim()) {\r\n            errors.role = \"Role is required\";\r\n            hasError = true;\r\n        }\r\n        if (editedRow.salary <= 0) {\r\n            errors.salary = \"Salary must be greater than zero\";\r\n            hasError = true;\r\n        }\r\n\r\n        // Update validation errors value\r\n        setValidationErrors(errors);\r\n\r\n        //updated edited value if fields are not empty on each row data\r\n        //Note: On reload it will get back to its initial state\r\n        if (!hasError && selectedRowIndex !== null) {\r\n            onEdit(selectedRowIndex, editedRow);\r\n            setShowEditModal(false);\r\n            setSelectedRowIndex(null);\r\n        }\r\n    };\r\n\r\n    //delete a row data\r\n    //Note: On reload it will get back to its initial state\r\n    const handleRemoveClick = (index: number) => {\r\n        onRemove(index);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"mt-2\">\r\n                <h3 className=\"fw-bold\" style={{ marginBottom: \"1rem\" }}>\r\n                    Employee Salary\r\n                </h3>\r\n                <h4 className=\"fw-bolder\">Dashboard / Salary</h4>\r\n            </div>\r\n            {/* Table rendering code */}\r\n            <div className=\"bg-white p-3 rounded-1 shadow-sm \">\r\n                <Table striped responsive className=\"table-nowrap table-centered mt-4 fw-bold\">\r\n                    {/* Table Heading */}\r\n                    <thead className=\"bg-white\">\r\n                        <tr>\r\n                            <th className=\"border-0 \">Name</th>\r\n                            <th className=\"border-0\">Employee ID</th>\r\n                            <th className=\"border-0\">Email</th>\r\n                            <th className=\"border-0\">Role</th>\r\n                            <th className=\"border-0\">Salary</th>\r\n                            <th className=\"border-0\">Payslip</th>\r\n                            <th className=\"border-0\">Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    {/* Table Body */}\r\n\r\n                    <tbody className=\"fw-bolder\">\r\n                        {(tableRows || []).map((row, index) => {\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>\r\n                                        <div className=\"d-flex align-items-center  gap-2 \">\r\n                                            <img\r\n                                                style={{\r\n                                                    width: \"60px\",\r\n                                                    height: \"60px\",\r\n                                                }}\r\n                                                className=\"rounded-pill\"\r\n                                                src={avatar}\r\n                                                alt=\"User\"\r\n                                            />\r\n                                            {row.name}\r\n                                        </div>\r\n                                    </td>\r\n                                    <td>{row.employeeId}</td>\r\n                                    <td>{row.email}</td>\r\n                                    <td>{row.role}</td>\r\n                                    <td>${row.salary}</td>\r\n                                    <td>\r\n                                        <Link to=\"/task/Payslip\">\r\n                                            <Button\r\n                                                style={{\r\n                                                    borderRadius: \"3rem\",\r\n                                                }}\r\n                                                variant=\"warning\"\r\n                                                className=\"fw-bold\"\r\n                                            >\r\n                                                Generate Slip\r\n                                            </Button>\r\n                                        </Link>\r\n                                    </td>\r\n                                    <td>\r\n                                        <Dropdown>\r\n                                            <Dropdown.Toggle\r\n                                                as=\"a\"\r\n                                                className=\"cursor-pointer table-action-btn btn btn-light btn-xs\"\r\n                                            >\r\n                                                <HiDotsVertical size={15} />\r\n                                            </Dropdown.Toggle>\r\n                                            <Dropdown.Menu align=\"start\">\r\n                                                <Dropdown.Item\r\n                                                    className=\"d-flex align-items-center gap-1\"\r\n                                                    onClick={() => handleEditClick(index)}\r\n                                                >\r\n                                                    <MdEdit size={15} />\r\n                                                    Edit\r\n                                                </Dropdown.Item>\r\n                                                <Dropdown.Item\r\n                                                    className=\"d-flex align-items-center gap-1\"\r\n                                                    onClick={() => handleRemoveClick(index)}\r\n                                                >\r\n                                                    <MdDelete size={15} />\r\n                                                    Remove\r\n                                                </Dropdown.Item>\r\n                                            </Dropdown.Menu>\r\n                                        </Dropdown>\r\n                                    </td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </Table>\r\n                <div className=\"d-flex justify-content-end gap-1 \">\r\n                    <p\r\n                        className=\"bg-warning text-white fw-bolder rounded-1\"\r\n                        style={{ padding: \"0.5rem 0.9rem\" }}\r\n                    >\r\n                        1\r\n                    </p>\r\n                    <p\r\n                        className=\"text-warning fw-bolder rounded-1\"\r\n                        style={{ padding: \"0.5rem 0.9rem\" }}\r\n                    >\r\n                        2\r\n                    </p>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Modal Setup*/}\r\n            <Modal show={showEditModal} onHide={() => setShowEditModal(false)}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Edit Employee</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        <Form.Group className=\"mb-3\">\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={editedRow.name}\r\n                                onChange={(e) =>\r\n                                    setEditedRow({ ...editedRow, name: e.target.value })\r\n                                }\r\n                                isInvalid={!!validationErrors.name}\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {validationErrors.name}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-3\">\r\n                            <Form.Label>Employee ID</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={editedRow.employeeId}\r\n                                onChange={(e) =>\r\n                                    setEditedRow({ ...editedRow, employeeId: e.target.value })\r\n                                }\r\n                                isInvalid={!!validationErrors.employeeId}\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {validationErrors.employeeId}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-3\">\r\n                            <Form.Label>Email</Form.Label>\r\n                            <Form.Control\r\n                                type=\"email\"\r\n                                value={editedRow.email}\r\n                                onChange={(e) =>\r\n                                    setEditedRow({ ...editedRow, email: e.target.value })\r\n                                }\r\n                                isInvalid={!!validationErrors.email}\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {validationErrors.email}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-3\">\r\n                            <Form.Label>Role</Form.Label>\r\n                            <Form.Control\r\n                                as=\"select\"\r\n                                value={editedRow.role}\r\n                                onChange={(e) =>\r\n                                    setEditedRow({ ...editedRow, role: e.target.value })\r\n                                }\r\n                                isInvalid={!!validationErrors.role}\r\n                            >\r\n                                <option value=\"\">Select Role</option>\r\n                                <option value=\"Software Engineer\">Software Engineer</option>\r\n                                <option value=\"Software Tester\">Software Tester</option>\r\n                                <option value=\"Frontend Developer\">Frontend Developer</option>\r\n                                <option value=\"UI/UX Developer\">UI/UX Developer</option>\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {validationErrors.role}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-3\">\r\n                            <Form.Label>Salary</Form.Label>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                value={editedRow.salary}\r\n                                onChange={(e) =>\r\n                                    setEditedRow({ ...editedRow, salary: Number(e.target.value) })\r\n                                }\r\n                                isInvalid={!!validationErrors.salary}\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {validationErrors.salary}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={() => setShowEditModal(false)}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={handleEditSave}>\r\n                        Save Changes\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EmployeeSalaryTable;\r\n","import { useState } from \"react\";\r\nimport { Modal, Button, Form } from \"react-bootstrap\";\r\nimport { FaPlus } from \"react-icons/fa\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport EmployeeSalaryTable from \"../../components/Task/Employee-Salary/EmployeeSalaryTable\";\r\n\r\n// Type declaration\r\ninterface FormData {\r\n    name: string;\r\n    employeeId: string;\r\n    email: string;\r\n    joinDate: string;\r\n    role: string;\r\n    salary: number;\r\n}\r\n\r\nconst EmployeeSalary = () => {\r\n    //states declarations with dummy data\r\n    const [showModal, setShowModal] = useState(false);\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n        reset,\r\n        watch,\r\n    } = useForm<FormData>();\r\n    const [tableData, setTableData] = useState<FormData[]>([\r\n        {\r\n            name: \"Absent amount\",\r\n            employeeId: \"FT-0001\",\r\n            email: \"johndoe@example.com\",\r\n            joinDate: \"1 Jan 2023\",\r\n            role: \"Android Developer\",\r\n            salary: 1000,\r\n        },\r\n        {\r\n            name: \"Mary Smith\",\r\n            employeeId: \"FT-0002\",\r\n            email: \"marysmith@example.com\",\r\n            joinDate: \"15 Feb 2022\",\r\n            role: \"iOS Developer\",\r\n            salary: 1200,\r\n        },\r\n        {\r\n            name: \"Alex Johnson\",\r\n            employeeId: \"FT-0003\",\r\n            email: \"alexjohnson@example.com\",\r\n            joinDate: \"10 Mar 2021\",\r\n            role: \"Web Developer\",\r\n            salary: 1100,\r\n        },\r\n        {\r\n            name: \"Emily Brown\",\r\n            employeeId: \"FT-0004\",\r\n            email: \"emilybrown@example.com\",\r\n            joinDate: \"5 Apr 2020\",\r\n            role: \"UI/UX Designer\",\r\n            salary: 1300,\r\n        },\r\n    ]);\r\n\r\n    //Handle Modal Open & Close\r\n    const handleModalClose = () => {\r\n        setShowModal(false);\r\n    };\r\n\r\n    const handleModalOpen = () => {\r\n        setShowModal(true);\r\n    };\r\n\r\n    //Add new row data\r\n    //Note: On reload it will get back to its initial state\r\n    const handleAddDeduction = handleSubmit((data) => {\r\n        setTableData([...tableData, data]);\r\n        reset();\r\n        setShowModal(false);\r\n    });\r\n\r\n    //updated edited value if fields are not empty on each row data\r\n    //Note: On reload it will get back to its initial state\r\n    const handleEdit = (index: number, updatedRow: FormData) => {\r\n        const updatedTableData = [...tableData];\r\n        updatedTableData[index] = updatedRow;\r\n        setTableData(updatedTableData);\r\n    };\r\n\r\n    //delete a row data\r\n    //Note: On reload it will get back to its initial state\r\n    const handleRemove = (index: number) => {\r\n        const updatedTableData = tableData.filter((_, i) => i !== index);\r\n        setTableData(updatedTableData);\r\n    };\r\n\r\n    return (\r\n        <div className=\"position-relative\">\r\n            {/* rendering the table */}\r\n            <EmployeeSalaryTable\r\n                tableRows={tableData}\r\n                onEdit={handleEdit}\r\n                onRemove={handleRemove}\r\n            />\r\n\r\n            {/* Add Button */}\r\n            <Button\r\n                style={{\r\n                    top: \"6rem\",\r\n                    right: \"1.6rem\",\r\n                }}\r\n                variant=\"warning\"\r\n                className=\"fw-bold d-flex align-items-center gap-1 position-absolute text-white\"\r\n                onClick={handleModalOpen}\r\n            >\r\n                <FaPlus size={18} />\r\n                Add Employee\r\n            </Button>\r\n\r\n            {/* Modal Setup */}\r\n            <Modal show={showModal} onHide={handleModalClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Add Deduction</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form onSubmit={handleAddDeduction}>\r\n                        <div className=\"mb-3\">\r\n                            <Form.Label htmlFor=\"name\">Name</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                id=\"name\"\r\n                                {...register(\"name\", { required: \"Name is required\" })}\r\n                                isInvalid={!!errors.name}\r\n                                isValid={!!watch(\"name\") && !errors.name}\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.name && errors.name.message}\r\n                            </Form.Control.Feedback>\r\n                        </div>\r\n\r\n                        <div className=\"mb-3\">\r\n                            <Form.Label htmlFor=\"employeeId\">Employee ID</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                id=\"employeeId\"\r\n                                {...register(\"employeeId\", { required: \"EmployeeID is required\" })}\r\n                                isInvalid={!!errors.employeeId}\r\n                                isValid={!!watch(\"employeeId\") && !errors.employeeId}\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.employeeId && errors.employeeId.message}\r\n                            </Form.Control.Feedback>\r\n                        </div>\r\n\r\n                        <div className=\"mb-3\">\r\n                            <Form.Label htmlFor=\"email\">Email</Form.Label>\r\n                            <Form.Control\r\n                                type=\"email\"\r\n                                id=\"email\"\r\n                                {...register(\"email\", { required: \"Email is required\" })}\r\n                                isInvalid={!!errors.email}\r\n                                isValid={!!watch(\"email\") && !errors.email}\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.email && errors.email.message}\r\n                            </Form.Control.Feedback>\r\n                        </div>\r\n\r\n                        <div className=\"mb-3\">\r\n                            <Form.Label htmlFor=\"joinDate\">Join Date</Form.Label>\r\n                            <Form.Control\r\n                                type=\"date\"\r\n                                id=\"joinDate\"\r\n                                {...register(\"joinDate\", { required: \"Join Date is required\" })}\r\n                                isInvalid={!!errors.joinDate}\r\n                                isValid={!!watch(\"joinDate\") && !errors.joinDate}\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.joinDate && errors.joinDate.message}\r\n                            </Form.Control.Feedback>\r\n                        </div>\r\n\r\n                        <div className=\"mb-3\">\r\n                            <Form.Label htmlFor=\"role\">Role</Form.Label>\r\n                            <Form.Select\r\n                                id=\"role\"\r\n                                {...register(\"role\", { required: \"Role is required\" })}\r\n                                isInvalid={!!errors.role}\r\n                                isValid={!!watch(\"role\") && !errors.role}\r\n                            >\r\n                                <option value=\"\">Select Role</option>\r\n                                <option value=\"Software Engineer\">Software Engineer</option>\r\n                                <option value=\"Software Tester\">Software Tester</option>\r\n                                <option value=\"Frontend Developer\">Frontend Developer</option>\r\n                                <option value=\"UI/UX Developer\">UI/UX Developer</option>\r\n                            </Form.Select>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.role && errors.role.message}\r\n                            </Form.Control.Feedback>\r\n                        </div>\r\n\r\n                        <div className=\"mb-3\">\r\n                            <Form.Label htmlFor=\"salary\">Salary</Form.Label>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                id=\"salary\"\r\n                                {...register(\"salary\", { required: \"Salary is required\" })}\r\n                                isInvalid={!!errors.salary}\r\n                                isValid={!!watch(\"salary\") && !errors.salary}\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.salary && errors.salary.message}\r\n                            </Form.Control.Feedback>\r\n                        </div>\r\n\r\n                        <div className=\"d-flex justify-content-end gap-2 \">\r\n                            <Button variant=\"secondary\" onClick={handleModalClose}>\r\n                                Close\r\n                            </Button>\r\n                            <Button variant=\"primary\" type=\"submit\">\r\n                                Save\r\n                            </Button>\r\n                        </div>\r\n                    </Form>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EmployeeSalary;\r\n"],"names":["_ref","tableRows","onEdit","onRemove","showEditModal","setShowEditModal","useState","selectedRowIndex","setSelectedRowIndex","editedRow","setEditedRow","name","employeeId","email","joinDate","role","salary","validationErrors","setValidationErrors","_jsxs","_Fragment","children","className","_jsx","style","marginBottom","Table","striped","responsive","map","row","index","width","height","src","avatar","alt","Link","to","Button","borderRadius","variant","Dropdown","as","HiDotsVertical","size","align","onClick","selectedRow","handleEditClick","MdEdit","handleRemoveClick","MdDelete","padding","Modal","show","onHide","closeButton","Form","type","value","onChange","e","target","isInvalid","Number","handleEditSave","errors","hasError","trim","EmployeeSalary","showModal","setShowModal","register","handleSubmit","formState","reset","watch","useForm","tableData","setTableData","handleModalClose","handleAddDeduction","data","EmployeeSalaryTable","handleEdit","updatedRow","updatedTableData","filter","_","i","top","right","handleModalOpen","FaPlus","onSubmit","htmlFor","id","required","isValid","message"],"sourceRoot":""}