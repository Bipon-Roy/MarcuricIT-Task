{"version":3,"file":"static/js/8180.b7863e97.chunk.js","mappings":"6QAiLA,MA9JqBA,IAAwD,IAAvD,UAAEC,EAAS,OAAEC,EAAM,SAAEC,GAA4BH,EAEnE,MAAOI,EAAeC,IAAoBC,EAAAA,EAAAA,WAAkB,IACrDC,EAAkBC,IAAuBF,EAAAA,EAAAA,UAAwB,OACjEG,EAAYC,IAAiBJ,EAAAA,EAAAA,UAAiB,KAC9CK,EAAkBC,IAAuBN,EAAAA,EAAAA,UAAiB,KAC1DO,EAAQC,IAAaR,EAAAA,EAAAA,UAA+B,CAAC,GAqC5D,OACIS,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,OAAMD,SAAA,EACjBE,EAAAA,EAAAA,KAAA,MAAID,UAAU,UAAUE,MAAO,CAAEC,aAAc,QAASJ,SAAC,mBAGzDE,EAAAA,EAAAA,KAAA,MAAID,UAAU,YAAWD,SAAC,kCAG9BF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,oCAAmCD,SAAA,EAC9CF,EAAAA,EAAAA,MAACO,EAAAA,EAAK,CAACC,SAAO,EAACC,YAAU,EAACN,UAAU,2CAA0CD,SAAA,EAE1EE,EAAAA,EAAAA,KAAA,SAAOD,UAAU,WAAUD,UACvBF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIE,EAAAA,EAAAA,KAAA,MAAID,UAAU,YAAWD,SAAC,UAC1BE,EAAAA,EAAAA,KAAA,MAAID,UAAU,WAAUD,SAAC,yBACzBE,EAAAA,EAAAA,KAAA,MAAID,UAAU,WAAUD,SAAC,iBAIjCE,EAAAA,EAAAA,KAAA,SAAOD,UAAU,aAAYD,UACvBhB,GAAa,IAAIwB,KAAI,CAACC,EAAKC,KAErBZ,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACIE,EAAAA,EAAAA,KAAA,MAAAF,SAAKS,EAAIE,QACTb,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,IAAES,EAAIG,eACVV,EAAAA,EAAAA,KAAA,MAAAF,UACIF,EAAAA,EAAAA,MAACe,EAAAA,EAAQ,CAAAb,SAAA,EACLE,EAAAA,EAAAA,KAACW,EAAAA,EAAAA,OAAe,CACZC,GAAG,IACHb,UAAU,uDAAsDD,UAEhEE,EAAAA,EAAAA,KAACa,EAAAA,IAAc,CAACC,KAAM,QAE1BlB,EAAAA,EAAAA,MAACe,EAAAA,EAAAA,KAAa,CAACI,MAAM,QAAOjB,SAAA,EACxBF,EAAAA,EAAAA,MAACe,EAAAA,EAAAA,KAAa,CACVZ,UAAU,kCACViB,QAASA,IAvEhCR,KACrB,MAAMS,EAAcnC,EAAU0B,GAC9BjB,EAAc0B,EAAYR,MAC1BhB,EAAoBwB,EAAYP,YAChCrB,EAAoBmB,GACpBtB,GAAiB,EAAK,EAkEqCgC,CAAgBV,GAAOV,SAAA,EAEtCE,EAAAA,EAAAA,KAACmB,EAAAA,IAAM,CAACL,KAAM,KAAM,WAIxBlB,EAAAA,EAAAA,MAACe,EAAAA,EAAAA,KAAa,CACVZ,UAAU,kCACViB,QAASA,IAjD9BR,KACvBxB,EAASwB,EAAM,EAgD4CY,CAAkBZ,GAAOV,SAAA,EAExCE,EAAAA,EAAAA,KAACqB,EAAAA,IAAQ,CAACP,KAAM,KAAM,sBAxBjCN,WAmCzBR,EAAAA,EAAAA,KAAA,OAAKD,UAAU,6BAA4BD,UACvCE,EAAAA,EAAAA,KAAA,KACID,UAAU,6CACVE,MAAO,CAAEqB,QAAS,iBAAkBxB,SACvC,YAQTF,EAAAA,EAAAA,MAAC2B,EAAAA,EAAK,CAACC,KAAMvC,EAAewC,OAAQA,IAAMvC,GAAiB,GAAOY,SAAA,EAC9DE,EAAAA,EAAAA,KAACuB,EAAAA,EAAAA,OAAY,CAACG,aAAW,EAAA5B,UACrBE,EAAAA,EAAAA,KAACuB,EAAAA,EAAAA,MAAW,CAAAzB,SAAC,oBAEjBE,EAAAA,EAAAA,KAACuB,EAAAA,EAAAA,KAAU,CAAAzB,UACPF,EAAAA,EAAAA,MAAC+B,EAAAA,EAAI,CAAA7B,SAAA,EACDF,EAAAA,EAAAA,MAAC+B,EAAAA,EAAAA,MAAU,CAAC5B,UAAU,OAAMD,SAAA,EACxBE,EAAAA,EAAAA,KAAC2B,EAAAA,EAAAA,MAAU,CAAA7B,SAAC,UACZE,EAAAA,EAAAA,KAAC2B,EAAAA,EAAAA,QAAY,CACTC,KAAK,OACLC,MAAOvC,EACPwC,SAAWC,GAAMxC,EAAcwC,EAAEC,OAAOH,OACxCI,YAAavC,EAAOe,QAExBT,EAAAA,EAAAA,KAAC2B,EAAAA,EAAAA,QAAAA,SAAqB,CAACC,KAAK,UAAS9B,SAChCJ,EAAOe,WAGhBb,EAAAA,EAAAA,MAAC+B,EAAAA,EAAAA,MAAU,CAAC5B,UAAU,OAAMD,SAAA,EACxBE,EAAAA,EAAAA,KAAC2B,EAAAA,EAAAA,MAAU,CAAA7B,SAAC,iBACZE,EAAAA,EAAAA,KAAC2B,EAAAA,EAAAA,QAAY,CACTC,KAAK,SACLC,MAAOrC,EACPsC,SAAWC,GAAMtC,EAAoBsC,EAAEC,OAAOH,OAC9CI,YAAavC,EAAOgB,cAExBV,EAAAA,EAAAA,KAAC2B,EAAAA,EAAAA,QAAAA,SAAqB,CAACC,KAAK,UAAS9B,SAChCJ,EAAOgB,sBAKxBd,EAAAA,EAAAA,MAAC2B,EAAAA,EAAAA,OAAY,CAAAzB,SAAA,EACTE,EAAAA,EAAAA,KAACkC,EAAAA,EAAM,CAACC,QAAQ,YAAYnB,QAASA,IAAM9B,GAAiB,GAAOY,SAAC,WAGpEE,EAAAA,EAAAA,KAACkC,EAAAA,EAAM,CAACC,QAAQ,UAAUnB,QApInBoB,KAEnB,GAAK9C,GAAeE,GASpB,GAAyB,OAArBJ,EAA2B,CAE3BL,EAAOK,EADY,CAAEqB,KAAMnB,EAAYoB,WAAYlB,IAEnDN,GAAiB,GACjBG,EAAoB,MACpBM,EAAU,CAAC,EACf,OAdIA,EAAU,CACNc,KAAOnB,EAAkC,GAArB,mBACpBoB,WAAalB,EAA+C,GAA5B,2BAYxC,EAmH8DM,SAAC,yBAK5D,E,sBCvCX,MA1HqBuC,KAEjB,MAAOC,EAAWC,IAAgBpD,EAAAA,EAAAA,WAAS,IACrC,SACFqD,EAAQ,aACRC,EACAC,WAAW,OAAEhD,GAAQ,MACrBiD,EAAK,MACLC,IACAC,EAAAA,EAAAA,OACGC,EAAWC,IAAgB5D,EAAAA,EAAAA,UAAqB,CACnD,CACIsB,KAAM,gBACNC,WAAY,MAEhB,CACID,KAAM,UACNC,WAAY,MAEhB,CACID,KAAM,eACNC,WAAY,QAIdsC,EAAmBA,KACrBT,GAAa,EAAM,EASjBU,EAAqBR,GAAcS,IACrCH,EAAa,IAAID,EAAWI,IAC5BP,IACAJ,GAAa,EAAM,IAmBvB,OACI3C,EAAAA,EAAAA,MAAA,OAAKG,UAAU,oBAAmBD,SAAA,EAE9BE,EAAAA,EAAAA,KAACmD,EAAY,CAACrE,UAAWgE,EAAW/D,OAhBzBqE,CAAC5C,EAAe6C,KAC/B,MAAMC,EAAmB,IAAIR,GAC7BQ,EAAiB9C,GAAS6C,EAC1BN,EAAaO,EAAiB,EAa8BtE,SAR1CwB,IAClB,MAAM8C,EAAmBR,EAAUS,QAAO,CAACC,EAAGC,IAAMA,IAAMjD,IAC1DuC,EAAaO,EAAiB,KAQ1B1D,EAAAA,EAAAA,MAACsC,EAAAA,EAAM,CACHjC,MAAO,CACHyD,IAAK,OACLC,MAAO,UAEXxB,QAAQ,UACRpC,UAAU,uEACViB,QAxCY4C,KACpBrB,GAAa,EAAK,EAuCezC,SAAA,EAEzBE,EAAAA,EAAAA,KAAC6D,EAAAA,IAAM,CAAC/C,KAAM,KAAM,oBAIxBlB,EAAAA,EAAAA,MAAC2B,EAAAA,EAAK,CAACC,KAAMc,EAAWb,OAAQuB,EAAiBlD,SAAA,EAC7CE,EAAAA,EAAAA,KAACuB,EAAAA,EAAAA,OAAY,CAACG,aAAW,EAAA5B,UACrBE,EAAAA,EAAAA,KAACuB,EAAAA,EAAAA,MAAW,CAAAzB,SAAC,qBAEjBE,EAAAA,EAAAA,KAACuB,EAAAA,EAAAA,KAAU,CAAAzB,UACPF,EAAAA,EAAAA,MAAC+B,EAAAA,EAAI,CAACmC,SAAUb,EAAmBnD,SAAA,EAC/BF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,OAAMD,SAAA,EACjBE,EAAAA,EAAAA,KAAC2B,EAAAA,EAAAA,MAAU,CAACoC,QAAQ,OAAMjE,SAAC,UAC3BE,EAAAA,EAAAA,KAAC2B,EAAAA,EAAAA,QAAY,CACTC,KAAK,OACLoC,GAAG,UACCxB,EAAS,OAAQ,CAAEyB,SAAU,qBACjChC,YAAavC,EAAOe,KACpByD,UAAWtB,EAAM,UAAYlD,EAAOe,QAExCT,EAAAA,EAAAA,KAAC2B,EAAAA,EAAAA,QAAAA,SAAqB,CAACC,KAAK,UAAS9B,SAChCJ,EAAOe,MAAQf,EAAOe,KAAK0D,cAGpCvE,EAAAA,EAAAA,MAAA,OAAKG,UAAU,OAAMD,SAAA,EACjBE,EAAAA,EAAAA,KAAC2B,EAAAA,EAAAA,MAAU,CAACoC,QAAQ,aAAYjE,SAAC,iBACjCE,EAAAA,EAAAA,KAAC2B,EAAAA,EAAAA,QAAY,CACTC,KAAK,SACLoC,GAAG,gBACCxB,EAAS,aAAc,CAAEyB,SAAU,4BACvChC,YAAavC,EAAOgB,WACpBwD,UAAWtB,EAAM,gBAAkBlD,EAAOgB,cAE9CV,EAAAA,EAAAA,KAAC2B,EAAAA,EAAAA,QAAAA,SAAqB,CAACC,KAAK,UAAS9B,SAChCJ,EAAOgB,YAAchB,EAAOgB,WAAWyD,cAGhDvE,EAAAA,EAAAA,MAAA,OAAKG,UAAU,oCAAmCD,SAAA,EAC9CE,EAAAA,EAAAA,KAACkC,EAAAA,EAAM,CAACC,QAAQ,YAAYnB,QAASgC,EAAiBlD,SAAC,WAGvDE,EAAAA,EAAAA,KAACkC,EAAAA,EAAM,CAACC,QAAQ,UAAUP,KAAK,SAAQ9B,SAAC,sBAOtD,C","sources":["components/Task/Payroll-Items/PayrollTable.tsx","pages/AssignedTask/PayrollItems.tsx"],"sourcesContent":["//the component is a child component which invoked by EmployeeSalary from '/pages/AssignTask'\r\n\r\nimport { useState } from \"react\";\r\nimport { Dropdown, Table, Modal, Button, Form } from \"react-bootstrap\";\r\nimport { HiDotsVertical } from \"react-icons/hi\";\r\nimport { MdDelete, MdEdit } from \"react-icons/md\";\r\n\r\n//type declaration\r\ninterface RowDataType {\r\n    name: string;\r\n    unitAmount: string;\r\n}\r\n\r\ninterface PayrollTableData {\r\n    tableRows: RowDataType[];\r\n    onEdit: (index: number, updatedRow: RowDataType) => void;\r\n    onRemove: (index: number) => void;\r\n}\r\n\r\nconst PayrollTable = ({ tableRows, onEdit, onRemove }: PayrollTableData) => {\r\n    //states declaration\r\n    const [showEditModal, setShowEditModal] = useState<boolean>(false);\r\n    const [selectedRowIndex, setSelectedRowIndex] = useState<number | null>(null);\r\n    const [editedName, setEditedName] = useState<string>(\"\");\r\n    const [editedUnitAmount, setEditedUnitAmount] = useState<string>(\"\");\r\n    const [errors, setErrors] = useState<Partial<RowDataType>>({});\r\n\r\n    //edit button functionality\r\n    const handleEditClick = (index: number) => {\r\n        const selectedRow = tableRows[index];\r\n        setEditedName(selectedRow.name);\r\n        setEditedUnitAmount(selectedRow.unitAmount);\r\n        setSelectedRowIndex(index);\r\n        setShowEditModal(true);\r\n    };\r\n\r\n    const handleEditSave = () => {\r\n        //showing validation error\r\n        if (!editedName || !editedUnitAmount) {\r\n            setErrors({\r\n                name: !editedName ? \"Name is required\" : \"\",\r\n                unitAmount: !editedUnitAmount ? \"Unit Amount is required\" : \"\",\r\n            });\r\n            return;\r\n        }\r\n        //updated edited value if fields are not empty on each row data\r\n        //Note: On reload it will get back to its initial state\r\n        if (selectedRowIndex !== null) {\r\n            const updatedRow = { name: editedName, unitAmount: editedUnitAmount };\r\n            onEdit(selectedRowIndex, updatedRow);\r\n            setShowEditModal(false);\r\n            setSelectedRowIndex(null);\r\n            setErrors({});\r\n        }\r\n    };\r\n\r\n    //delete a row data\r\n    //Note: On reload it will get back to its initial state\r\n    const handleRemoveClick = (index: number) => {\r\n        onRemove(index);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"mt-2\">\r\n                <h3 className=\"fw-bold\" style={{ marginBottom: \"1rem\" }}>\r\n                    Payroll Items\r\n                </h3>\r\n                <h4 className=\"fw-bolder\">Dashboard / Payroll Items</h4>\r\n            </div>\r\n            {/* Table rendering code */}\r\n            <div className=\"bg-white p-3 rounded-1 shadow-sm \">\r\n                <Table striped responsive className=\"table-nowrap table-centered mt-4 fw-bold\">\r\n                    {/* Table Heading */}\r\n                    <thead className=\"bg-white\">\r\n                        <tr>\r\n                            <th className=\"border-0 \">Name</th>\r\n                            <th className=\"border-0\">Default/Unit Amount</th>\r\n                            <th className=\"border-0\">Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    {/* Table Body */}\r\n                    <tbody className=\"fw-bolder \">\r\n                        {(tableRows || []).map((row, index) => {\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>{row.name}</td>\r\n                                    <td>${row.unitAmount}</td>\r\n                                    <td>\r\n                                        <Dropdown>\r\n                                            <Dropdown.Toggle\r\n                                                as=\"a\"\r\n                                                className=\"cursor-pointer table-action-btn btn btn-light btn-xs\"\r\n                                            >\r\n                                                <HiDotsVertical size={15} />\r\n                                            </Dropdown.Toggle>\r\n                                            <Dropdown.Menu align=\"start\">\r\n                                                <Dropdown.Item\r\n                                                    className=\"d-flex align-items-center gap-1\"\r\n                                                    onClick={() => handleEditClick(index)}\r\n                                                >\r\n                                                    <MdEdit size={15} />\r\n                                                    Edit\r\n                                                </Dropdown.Item>\r\n\r\n                                                <Dropdown.Item\r\n                                                    className=\"d-flex align-items-center gap-1\"\r\n                                                    onClick={() => handleRemoveClick(index)}\r\n                                                >\r\n                                                    <MdDelete size={15} />\r\n                                                    Remove\r\n                                                </Dropdown.Item>\r\n                                            </Dropdown.Menu>\r\n                                        </Dropdown>\r\n                                    </td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </Table>\r\n                <div className=\"d-flex justify-content-end\">\r\n                    <p\r\n                        className=\"bg-warning text-white fw-bolder rounded-1 \"\r\n                        style={{ padding: \"0.5rem 0.9rem\" }}\r\n                    >\r\n                        1\r\n                    </p>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Modal Setup*/}\r\n\r\n            <Modal show={showEditModal} onHide={() => setShowEditModal(false)}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Edit Payroll</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        <Form.Group className=\"mb-3\">\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                value={editedName}\r\n                                onChange={(e) => setEditedName(e.target.value)}\r\n                                isInvalid={!!errors.name}\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.name}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-3\">\r\n                            <Form.Label>Unit Amount</Form.Label>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                value={editedUnitAmount}\r\n                                onChange={(e) => setEditedUnitAmount(e.target.value)}\r\n                                isInvalid={!!errors.unitAmount}\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.unitAmount}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={() => setShowEditModal(false)}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={handleEditSave}>\r\n                        Save Changes\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PayrollTable;\r\n","import { useState } from \"react\";\r\nimport PayrollTable from \"../../components/Task/Payroll-Items/PayrollTable\";\r\nimport { Modal, Button, Form } from \"react-bootstrap\";\r\nimport { FaPlus } from \"react-icons/fa\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\n//type declaration\r\ninterface FormData {\r\n    name: string;\r\n    unitAmount: string;\r\n}\r\n\r\nconst PayrollItems = () => {\r\n    //states declarations with dummy data\r\n    const [showModal, setShowModal] = useState(false);\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n        reset,\r\n        watch,\r\n    } = useForm<FormData>();\r\n    const [tableData, setTableData] = useState<FormData[]>([\r\n        {\r\n            name: \"Absent amount\",\r\n            unitAmount: \"10\",\r\n        },\r\n        {\r\n            name: \"Advance\",\r\n            unitAmount: \"20\",\r\n        },\r\n        {\r\n            name: \"Unpaid leave\",\r\n            unitAmount: \"15\",\r\n        },\r\n    ]);\r\n    //Handle Modal Open & Close\r\n    const handleModalClose = () => {\r\n        setShowModal(false);\r\n    };\r\n\r\n    const handleModalOpen = () => {\r\n        setShowModal(true);\r\n    };\r\n\r\n    //Add new row data\r\n    //Note: On reload it will get back to its initial state\r\n    const handleAddDeduction = handleSubmit((data) => {\r\n        setTableData([...tableData, data]);\r\n        reset();\r\n        setShowModal(false);\r\n    });\r\n\r\n    //updated edited value if fields are not empty on each row data\r\n    //Note: On reload it will get back to its initial state\r\n\r\n    const handleEdit = (index: number, updatedRow: FormData) => {\r\n        const updatedTableData = [...tableData];\r\n        updatedTableData[index] = updatedRow;\r\n        setTableData(updatedTableData);\r\n    };\r\n\r\n    //delete a row data\r\n    //Note: On reload it will get back to its initial state\r\n    const handleRemove = (index: number) => {\r\n        const updatedTableData = tableData.filter((_, i) => i !== index);\r\n        setTableData(updatedTableData);\r\n    };\r\n\r\n    return (\r\n        <div className=\"position-relative\">\r\n            {/* rendering the table */}\r\n            <PayrollTable tableRows={tableData} onEdit={handleEdit} onRemove={handleRemove} />\r\n\r\n            <Button\r\n                style={{\r\n                    top: \"6rem\",\r\n                    right: \"1.6rem\",\r\n                }}\r\n                variant=\"warning\"\r\n                className=\"fw-bold d-flex align-items-center gap-1 position-absolute text-white\"\r\n                onClick={handleModalOpen}\r\n            >\r\n                <FaPlus size={18} />\r\n                Add Deduction\r\n            </Button>\r\n            {/* Modal Setup */}\r\n            <Modal show={showModal} onHide={handleModalClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Add Deduction</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form onSubmit={handleAddDeduction}>\r\n                        <div className=\"mb-3\">\r\n                            <Form.Label htmlFor=\"name\">Name</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                id=\"name\"\r\n                                {...register(\"name\", { required: \"Name is required\" })}\r\n                                isInvalid={!!errors.name}\r\n                                isValid={!!watch(\"name\") && !errors.name}\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.name && errors.name.message}\r\n                            </Form.Control.Feedback>\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <Form.Label htmlFor=\"unitAmount\">Unit Amount</Form.Label>\r\n                            <Form.Control\r\n                                type=\"number\"\r\n                                id=\"unitAmount\"\r\n                                {...register(\"unitAmount\", { required: \"Unit Amount is required\" })}\r\n                                isInvalid={!!errors.unitAmount}\r\n                                isValid={!!watch(\"unitAmount\") && !errors.unitAmount}\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.unitAmount && errors.unitAmount.message}\r\n                            </Form.Control.Feedback>\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-end gap-2 \">\r\n                            <Button variant=\"secondary\" onClick={handleModalClose}>\r\n                                Close\r\n                            </Button>\r\n                            <Button variant=\"primary\" type=\"submit\">\r\n                                Save\r\n                            </Button>\r\n                        </div>\r\n                    </Form>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PayrollItems;\r\n"],"names":["_ref","tableRows","onEdit","onRemove","showEditModal","setShowEditModal","useState","selectedRowIndex","setSelectedRowIndex","editedName","setEditedName","editedUnitAmount","setEditedUnitAmount","errors","setErrors","_jsxs","_Fragment","children","className","_jsx","style","marginBottom","Table","striped","responsive","map","row","index","name","unitAmount","Dropdown","as","HiDotsVertical","size","align","onClick","selectedRow","handleEditClick","MdEdit","handleRemoveClick","MdDelete","padding","Modal","show","onHide","closeButton","Form","type","value","onChange","e","target","isInvalid","Button","variant","handleEditSave","PayrollItems","showModal","setShowModal","register","handleSubmit","formState","reset","watch","useForm","tableData","setTableData","handleModalClose","handleAddDeduction","data","PayrollTable","handleEdit","updatedRow","updatedTableData","filter","_","i","top","right","handleModalOpen","FaPlus","onSubmit","htmlFor","id","required","isValid","message"],"sourceRoot":""}